function [CM, distance] = recognizer_mfb(pcondition,speaker)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%   Recognizing Routine:
%   loads internal representations (IR) of vocabulary words,
%   computes IR of the testsignal and derives distance using dtw-algorithm
%   gives back the name of the recognized variable and the distance vector
%   that contains the distance to every tested word
%
%   (c) Tim Jürgens, Medizinische Physik, Feb.2006
%
%   usage: [CM, distance] = recognizer
%
%   CM: confusion matrix
%   distance: distancematrix, contains the distances of IR from
%   vocabulary-templates (columns) to testsignals(rows)
%        
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

global backnoiseshift;
homedir = pwd;
underlines = findstr(homedir,'_');
vocabularyset = homedir(underlines(2)-1:underlines(2)+1);
matlabpath = 'd:\tim\matlab\';
%backnoise = load([matlabpath,'icranoise_16k.mat']);%geändert von tim
%12.6.07 - vorsicht unten!
if isnumeric(pcondition.noiselevel)
    backnoise = load([matlabpath,'icranoisetest_16k', num2str(backnoiseshift), '.mat']);
end



if strcmp(pcondition.noiselevel,'nobackgroundnoise')
    filename_to_save = sprintf('speech%i_noise%s_%s_mfb',pcondition.speechlevel,pcondition.noiselevel,vocabularyset);
elseif(pcondition.noiselevel < 0)
    tmp = abs(pcondition.noiselevel);
    filename_to_save = sprintf('speech%i_noise_%i_%s_mfb',pcondition.speechlevel,tmp,vocabularyset);
else
    filename_to_save = sprintf('speech%i_noise%i_%s_mfb',pcondition.speechlevel,pcondition.noiselevel,vocabularyset);
end

%load(['../vocabulary/Internal_Representations/cw' vocabularyset]);
load([homedir(1:underlines(2)+1) filesep 'vocabulary' filesep 'Internal_Representations' filesep filename_to_save]);

Verbose = 0;
CM = zeros(150);
File = dir('*.wav');
nFiles = length(File)
distance = zeros(nFiles,length(vocabulary)); %preallocation due to speed

addeddistance = zeros(nFiles);
min_mean_distance = 1;

for j = 1:nFiles,
    
    % check if file is from the same speaker that the program currently
    % works
    if File(j).name(1:4) == speaker,
        % get testsignal
        loga_number = eval(File(j).name(7:9));
        loga_name = iloga2sloga(loga_number)
        [testsignal, sfreq] = wavread(File(j).name);
        if Verbose
          figure;
          plot((0:1/sfreq:(length(testsignal)-1)/sfreq),testsignal);
          set(gca,'FontSize',16);
          xlabel('Time (s)');
          ylabel('Amplitude (arb.units)');
          title(loga_name);
          %sound(testsignal,sfreq);
        end

        % preprocessing = cut & add white noise/silence in front
        testsignal = preproc(testsignal, sfreq, vocabularyset,pcondition);
    
        if Verbose,
            figure;
            plot((0:1/sfreq:(length(testsignal)-1)/sfreq),testsignal);
            set(gca,'FontSize',16);
            xlabel('Time (s)');
            ylabel('Amplitude (arb.units)');
            title(loga_name);
            hold on;
            plot(ones(1:500,1)*(length(testsignal)-(length(testsignal)-0.4*sfreq)*0.25)/sfreq,(0:1/500:1-1/500),'k');
        end

        
        if strcmp(pcondition.noiselevel,'nobackgroundnoise')
               ;
        else
            backgroundnoise = backnoise.icranoise_test{getnr_fromvocabularyset(vocabularyset)};
            % set noise level
            backgroundnoise = backgroundnoise./rms(backgroundnoise)/db2factor(pcondition.noiselevel);
            % set initial sample at random for creating random noise.
            in_samp = 1;%ceil(500*rand);
            backgroundnoise = backgroundnoise(in_samp:length(testsignal)+in_samp-1);
            testsignal = testsignal + backgroundnoise;
        end
            
        testsignal = soft_onset(testsignal, sfreq, 0.05); %50 ms fade in für soften onset am anfang
        
        
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        %% ab hier hören!
        %%
        %% hörschwellensimulierendes rauschen
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        %add hearing threshold simulating noise
        hear_thres_noise = masknoise(pcondition.audiogram,length(testsignal),pcondition.audiogramfreqs,sfreq)./1e5;   %HERE SET IN THE AUDIOGRAM
        %1e5 is the factor to come from rainer beutelmanns implementation to pemo-level
        hear_thres_noise = hear_thres_noise(:,1); % take only the left ears threshold simulating noise
        testsignal = hear_thres_noise + testsignal;   
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        
        % control of preprocessing by printing pemo-input
        if (j == 2) && strcmp(vocabularyset,'a_a'),
            f_preproc = figure,plot(testsignal);
            if (ischar(pcondition.noiselevel))
              tempstring = [pcondition.noiselevel,'_',num2str(pcondition.speechlevel)];
            else
              tempstring = [num2str(pcondition.noiselevel),'_',num2str(pcondition.speechlevel)];
            end
            saveas(f_preproc,[loga_name,'_pp_',tempstring,'.fig']);
            saveas(f_preproc,[loga_name,'_pp_',tempstring,'.jpg']);
            close(f_preproc);
        end
        %%%%%%%%%%%% PEMO %%%%%%%%%%%%%%%%%%%%%
        IR_testtmp = pemo_preproc(testsignal,sfreq);%, sfreq,pcondition.nrmodchan);
        if iscell(IR_testtmp)
            IR_testsignal = IR_testtmp;
        else
            
     %% HIER AUCH
            IR_testtmp = IR_testtmp';
%             IR_testsignal{1} = IR_testtmp(:,:,1)';
%             IR_testsignal{2} = IR_testtmp(:,:,2)';
%             IR_testsignal{3} = IR_testtmp(:,:,3)';
            %IR_testsignal{4} = IR_testtmp(:,:,4);
%             if ~isempty(IR_vocabultmp(:,:,5))
%                 error('IR_vocabul hat mehr Modulationsfilterbankkanäle als ausgewertet werden.')
%             end
        end
        if Verbose,
            figure;
            imagesc((0:1/100:(size(IR_testsignal,2)-1)/100),[],IR_testsignal);
            set(gca,'FontSize',16);
            axis xy;
            axis tight;
            xlabel('Time (s)');
            ylabel('# Channel');
            colorbar;        
        end
    %% HIER AUCH
        % cut IR of (white,ol) noise / silence in front
         IR_testsignal{1} = IR_testtmp(:,41:end);
%         for mod_freq = 1:length(IR_testsignal)
%              IR_testsignal{mod_freq} = IR_testsignal{mod_freq}(:,41:end);
%         end
        
        %%
        % equalize testsignal-IR in time damit in allen
        % modulationsfrequenz-IRs die zeit gleich ist.
        zeitlaenge = min(cellfun('size',IR_testsignal,2)); %minimal timelength of the modulation frequency layers
        for mod_freq = 1:length(IR_testsignal)
             IR_testsignal{mod_freq} = IR_testsignal{mod_freq}(:,1:zeitlaenge);
        end
        
       if Verbose,
            figure;
            imagesc((0:1/100:(size(IR_testsignal{1},2)-1)/100),[],IR_testsignal{1});
            set(gca,'FontSize',16);
            axis xy;
            axis tight;
            xlabel('Time (s)');
            ylabel('# Channel');
            title('Internal Representation ModulationChannel 1(lowpass at 2.5Hz)')
            colorbar;         
        end

    % determine distance between testsignal and vocabulary-templates
        for k = 1:length(vocabulary) 
            % equalize template-IRs in time
            zeitlaenge = min(cellfun('length',vocabulary(k).IR(1,:)));%minimal timelength of the modulation frequency layers
            for mod_freq = 1:length(vocabulary(k).IR)
                vocabulary(k).IR{mod_freq} = vocabulary(k).IR{mod_freq}(:,1:zeitlaenge);
            end
            %%%%%DTW%%%%%%
            distance(j,k) = dynamictimewarp_mfb(vocabulary(k).IR,IR_testsignal); 
        end
    
        % select minimal mean distance (optional), attention: recordings
        % must be in correct order!
        if min_mean_distance
            distances_in_categories = cell(1,nFiles);
            i = 1;
            only_one_loga(1) = 0; %numerates number of logatomes
            for k = 1:length(vocabulary) %loop for every vocabulary-entry 
                if(find(only_one_loga == vocabulary(k).number))
                    i = find(only_one_loga == vocabulary(k).number);
                elseif(only_one_loga(i) == 0)
                    only_one_loga(i) = vocabulary(k).number;
                else
                    i = length(only_one_loga)+1; %do this only if a new logatome is given
                    only_one_loga(i) = vocabulary(k).number;
                    
                end
              %  distance(j,k)
             %   addeddistance(j,i) = addeddistance(j,i) + distance(j,k);
                %addeddistance is a matrix, that contains in every column
                %different distance-values of 1 logatome
                distances_in_categories{i}(end+1) = distance(j,k); 
%                 if addeddistance(1,i) == 0
%                     addeddistance(1,i) = distance(j,k);
%                 else
%                     addeddistance(length(find(addeddistance(:,i)))+1,i) = distance(j,k);
%                 end
            end
            %addeddistance(j,:)
            %[tmp,index] = min(addeddistance(j,:));
            %[tmp, index] = min(mean(addeddistance));
            %distances_in_categories{1}
            [tmp,index] = min(cellfun(@mean,distances_in_categories));
            recname = iloga2sloga(only_one_loga(index))
            actual_col = only_one_loga(index);
        else
            [tmp, index] = min(distance(j,:));
            recname = vocabulary(index).name
            actual_col = vocabulary(index).number;
        end
        % write recognizing results to convolution matrix, where columns are
        % single vocabulary logatomes and rows are single test logatomes;
        % 1 for recognized, 0 for not recognized
        actual_row = sloga2iloga(loga_name);
    
        % if more than one template for a logatome write it in same column of
        % convolution matrix

        CM(actual_row,actual_col) = CM(actual_row,actual_col)+1;
        %close all;
    else
        ;
    end
end

%%% output: MAT, HTML, Convolution Matrix
save([filename_to_save '.mat'], 'CM', 'distance');
printhtmlpage([filename_to_save '.html'],vocabulary,File,CM,distance,sfreq,pcondition,filename_to_save);


if Verbose,
    figure,imagesc(CM);
    colormap(abs(gray-1));
    set(gca,'FontSize',16);
    xlabel('Recognized No. of Logatome');
    ylabel('Presented No. of Logatome');
end
